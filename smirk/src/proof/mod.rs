use std::marker::PhantomData;

use halo2_proofs::{
    pasta::vesta::Affine,
    plonk::{ProvingKey, VerifyingKey},
};

mod insert;

/// A cryptographic proof of a fact
///
/// The exact details of the fact are given by the generic parameter `P`
#[derive(Debug, Clone)]
pub struct Proof<P: Provable> {
    /// The bytes generated by the transcript
    transcript_bytes: Vec<u8>,

    proving_key: ProvingKey<Affine>,
    verifying_key: VerifyingKey<Affine>,

    _marker: PhantomData<P>,
}

/// A marker trait for ZSTs representing
pub trait Provable: sealed::Sealed {}

/// A  proof that an insert to the tree was valid
pub struct Insert;
impl Provable for Insert {}

mod sealed {
    use super::*;

    pub trait Sealed {}

    impl Sealed for Insert {}
}
