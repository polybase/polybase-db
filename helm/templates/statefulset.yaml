apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "polybase.labels" . | nindent 4 }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "polybase.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels: {{- include "polybase.matchLabels" . | nindent 6 }}
  serviceName: {{ include "polybase.fullname" . }}-headless
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  replicas: {{ .Values.replicaCount }}
  updateStrategy: 
    type: {{ .Values.updateStrategy.type }}
  template:
    metadata:
      labels: {{- include "polybase.labels" . | nindent 8 }}
      {{- if .Values.podLabels }}
      {{- toYaml .Values.podLabels | nindent 8 }}
      {{- end }}
      {{- if or .Values.podAnnotations }}
      annotations:
        {{- if .Values.podAnnotations }}
        {{- toYaml .Values.podAnnotations | nindent 8 }}
        {{- end }}
        {{- if .Values.metrics.podAnnotations }}
        {{- toYaml .Values.metrics.podAnnotations | nindent 8 }}
        {{- end }}
      {{- end }}
    spec:
      {{- if .Values.affinity }}
      affinity: {{- include "polybase.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "polybase.pods" (dict "type" .Values.podAffinityPreset "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "polybase.pods" (dict "type" .Values.podAntiAffinityPreset "context" $) | nindent 10 }}
        nodeAffinity: {{- include "polybase.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "polybase.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "polybase.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName | quote }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "polybase.render" (dict "value" .Values.topologySpreadConstraints "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
      initContainers:
      - name: init-set
        image: alpine:latest
        command:
        - /mnt/scripts/run.sh
        volumeMounts:
        - name: data
          mountPath: /polybase
        {{- range $i := until (.Values.replicaCount | int) }}
        - name: secret-key-{{$i}}
          mountPath: /mnt/secret_keys/secret-key-{{$i}}
          subPath: secret-key-{{$i}}
        {{- end }}
        - name: scripts-vol
          mountPath: /mnt/scripts
      containers:
        - name: polybase
          command:
            {{- if .Values.command }}
            {{- include "polybase.render" (dict "value" .Values.command "context" $) | nindent 12 }}
            {{- end }}
          {{- if .Values.args }}
          args: {{- include "polybase.render" (dict "value" .Values.args "context" $) | nindent 12 }}
          {{- end }}
          image: {{ include "polybase.main_image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          env:
          - name: ENV
            value: "production"
          - name: SENTRY_DSN
            value: https://31af33d92360493f8f62ecae07bf8e35@o1371715.ingest.sentry.io/4504721199333376
          - name: ENV_NAME
            value: {{ .Values.env | quote }}
          - name: NETWORK_LADDR
            value: "/ip4/0.0.0.0/tcp/5001"
          - name: LOG_LEVEL
            value: "DEBUG"
          - name: LOG_FORMAT
            value: "JSON"
            {{- if .Values.extraEnvVars }}
            {{- include "polybase.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 10 }}
            {{- end }}
          {{- if .Values.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /v0/health
              port: 8080
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          {{- end }}
          ports:
            - name: public-api
              containerPort: {{ .Values.containerPorts.public_api | default "8080" }}
              {{- if .Values.hostNetwork }}
              hostPort: {{ .Values.containerPorts.public_api }}
              {{- end }}
            - name: p2p
              containerPort: {{ .Values.containerPorts.p2p | default "5001" }}
              {{- if .Values.hostNetwork }}
              hostPort: {{ .Values.containerPorts.p2p }}
              {{- end }}
          {{- if .Values.resources }}
          resources: {{ toYaml .Values.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
            {{- if .Values.extraVolumeMounts }}
            {{- include "polybase.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
      volumes:
      - name: scripts-vol
        configMap:
          name: secret-keys-setup
          defaultMode: 0555
      {{- range $i := until (.Values.replicaCount | int) }}
      - name: secret-key-{{$i}}
        secret: 
          secretName: secret-key-{{$i}}
      {{- end }}
  {{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
  {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels: {{- include "polybase.matchLabels" . | nindent 10 }}
        {{- if .Values.persistence.annotations }}
        annotations: {{- toYaml .Values.persistence.annotations | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
    {{- include "polybase.storageClass" (dict "persistence" .Values.persistence "global" .Values.global) | nindent 8 }}
    {{- end }}
